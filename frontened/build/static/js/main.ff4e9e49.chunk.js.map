{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","email","setEmail","password","setPassword","loading","setLoading","toast","useToast","history","useHistory","submitHandler","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","require","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","handleClick","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","variant","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","fontWeight","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff4e9e49.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      toast({\n        title: \"Please Refresh your page once If you didn't see any messages\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"5rem\">\n            <Button h=\"2rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"teal\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nconst dotenv = require(\"dotenv\");\ndotenv.config();\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords are different, Set it carefully! :]\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      toast({\n        title: \"Registration Successful!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      toast({\n        title: \"Refresh your page once :)\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"FunChitChat\");\n      data.append(\"cloud_name\", \"ddk6tmz8j\");\n      fetch(\"https://api.cloudinary.com/v1_1/ddk6tmz8j/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"5rem\">\n            <Button h=\"2rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"5rem\">\n            <Button h=\"2rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload Your Profile Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"#e1f5ec\"\r\n        w=\"100%\"\r\n        m=\"25px 0 15px 0\"\r\n        borderRadius=\"x-lg\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Text fontSize=\"5xl\" fontFamily=\"Work sans\">\r\n          FunChitChat\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"#f5ffff\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"top\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message.....\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"subtle\"\n      fontSize={12}\n      colorScheme=\"green\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\nconst UserListItem = ({ user, handleFunction }) => {\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"#e4f0a8\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"4px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n            color=\"#598ede\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"#d6fcff\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"4px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"50px\" }}\n        fontFamily=\"Work sans\"\n        fontWeight={700}\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#e5fce3\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text\n          fontSize=\"2xl\"\n          fontFamily=\"Work sans\"\n          fontWeight={700}\n          color=\"#b50453\"\n        >\n          FunChitChat\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\nimport { Route } from \"react-router-dom\";\nimport Homepage from \"./Pages/Homepage\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}